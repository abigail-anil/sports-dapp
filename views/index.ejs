<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Sports DApp</title>
  <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body class="bg-light">
<div class="container mt-5">
  <h2 class="text-center mb-4">🏅 Sports Coaching Finder</h2>

  <!-- Connect Wallet -->
  <div class="text-center my-4">
    <button class="btn btn-primary" onclick="connectWallet()">🔗 Connect MetaMask</button>
    <p id="walletAddress" class="mt-2 text-success"></p>
  </div>

  <div class="text-center my-3">
    <button class="btn btn-outline-secondary" onclick="showMyBookings()">📋 My Bookings</button>
  </div>

  <!-- Search Form -->
  <div class="card p-4 mb-4">
    <h5>🔍 Find Coaching Centers</h5>
    <form action="/geo-search" method="GET">
      <div class="row">
        <div class="col-md-6 mb-2">
          <input type="text" name="sport" class="form-control" placeholder="Sport (e.g., Tennis)" required>
        </div>
        <div class="col-md-6 mb-2">
          <input type="text" name="city" class="form-control" placeholder="City (e.g., Dublin)" required>
        </div>
      </div>
      <button class="btn btn-info">Search</button>
    </form>
  </div>

  <!-- Coaching Centers -->
  <% if (centers && centers.length > 0) { %>
    <div class="row">
      <% centers.forEach(center => { %>
        <div class="col-md-6 mb-4">
          <div class="card h-100">
            <div class="card-body">
              <h5 class="card-title"><%= center.name %></h5>
              <p><strong>Address:</strong> <%= center.address %></p>
              <p><strong>Rating:</strong> <%= center.rating %></p>
              <p><strong>Status:</strong> <%= center.openNow %></p>
              <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#centerModal<%= center.id %>" onclick="loadReviews('<%= center.name %>', '<%= center.id %>')">View More</button>
            </div>
          </div>
        </div>

        <!-- Modal -->
        <div class="modal fade" id="centerModal<%= center.id %>" tabindex="-1">
          <div class="modal-dialog modal-lg">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title"><%= center.name %></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
              </div>
              <div class="modal-body">
                <p><strong>Address:</strong> <%= center.address %></p>
                <p><strong>Booking Fee:</strong> <%= center.bookingFee %> ETH</p>
                <p><strong>Total Fee:</strong> <%= center.totalFee %> ETH</p>
                <p><strong>Availability:</strong> <%= center.availability %></p>
                <p><strong>Session Duration:</strong> <%= center.sessionHours %> hour(s)</p>
                <p><strong>Coach:</strong> <%= center.coach.name %> – <%= center.coach.expertise %></p>

                <!-- Booking Form -->
                <hr>
                <h6>💳 Book a Session using ETH</h6>
                <form onsubmit="return bookSession(event, this)"
                      data-center-name="<%= center.name %>"
                      data-sport="<%= sportOnly %>"
                      data-center-id="<%= center.id %>"
                      data-booking-fee="<%= center.bookingFee %>">
                  <input type="number" class="form-control mb-2" step="0.001"
                         id="fee<%= center.id %>" value="<%= center.bookingFee %>"
                         min="<%= center.bookingFee %>" required>
                  <small class="text-muted">Minimum: <%= center.bookingFee %> ETH</small>
                  <button class="btn btn-success mt-2">Pay & Book</button>
                  <p id="bookingMsg<%= center.id %>" class="text-info mt-2"></p>
                </form>

                <!-- Review Section -->
                <hr>
                <h6>📝 Reviews</h6>
                <ul id="reviewList<%= center.id %>"></ul>
                <form onsubmit="return addReview(event, '<%= center.name %>', '<%= center.id %>')">
                  <input type="text" class="form-control mb-2" placeholder="Your review" id="reviewMessage<%= center.id %>" required>
                  <input type="number" class="form-control mb-2" placeholder="Rating (1–5)" min="1" max="5" id="reviewRating<%= center.id %>" required>
                  <button class="btn btn-warning">Submit Review</button>
                  <p id="reviewMsg<%= center.id %>" class="text-info mt-2"></p>
                </form>
              </div>
            </div>
          </div>
        </div>
      <% }) %>
    </div>
  <% } else if (query) { %>
    <p class="text-center text-muted">No coaching centers found. Please try a different sport or city.</p>
  <% } %>
</div>

<!-- My Bookings Card -->
<div class="modal fade" id="bookingsModal" tabindex="-1" aria-labelledby="bookingsModalLabel" aria-hidden="true">
	<div class="modal-dialog">
	  <div class="modal-content">
		<div class="modal-header">
		  <h5 class="modal-title" id="bookingsModalLabel">📋 My Bookings</h5>
		  <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
		</div>
		<div class="modal-body">
		  <ul id="myBookingsList" class="list-group list-group-flush"></ul>
		</div>
	  </div>
	</div>
  </div>
  
  

<!-- Profile Modal -->
<div class="modal fade" id="profileModal" tabindex="-1">
  <div class="modal-dialog">
    <form class="modal-content" onsubmit="saveUserProfile(event)">
      <div class="modal-header">
        <h5 class="modal-title">👤 Complete Your Profile</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <input type="text" class="form-control mb-2" id="profileName" placeholder="Name" required>
        <input type="email" class="form-control mb-2" id="profileEmail" placeholder="Email" required>
        <input type="text" class="form-control mb-2" id="profileSport" placeholder="Preferred Sport" required>
      </div>
      <div class="modal-footer">
        <button type="submit" class="btn btn-success">Save</button>
      </div>
    </form>
  </div>
</div>

<!-- Bootstrap + DApp Script -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
  const bookingContractAddress = "0xe8c6239d960e72301a876eb4582cba66c25e37c0";
  const reviewContractAddress = "0x8b0979591caf02f4efbce863179f8a8bbc3a70b2";
  const bookingContractABI = [
  	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "centerName",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "sport",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "BookingCancelled",
		"type": "event"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "user",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "sport",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "centerName",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"name": "NewBooking",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_sport",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_centerName",
				"type": "string"
			}
		],
		"name": "bookSession",
		"outputs": [],
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "uint256",
				"name": "index",
				"type": "uint256"
			}
		],
		"name": "cancelBooking",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "withdrawAll",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "user",
				"type": "address"
			}
		],
		"name": "getBookingCount",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "_user",
				"type": "address"
			}
		],
		"name": "getBookingsByUser",
		"outputs": [
			{
				"components": [
					{
						"internalType": "string",
						"name": "sport",
						"type": "string"
					},
					{
						"internalType": "string",
						"name": "centerName",
						"type": "string"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"internalType": "struct BookingContract.Booking[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getContractBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "userBookings",
		"outputs": [
			{
				"internalType": "string",
				"name": "sport",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "centerName",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "amount",
				"type": "uint256"
			},
			{
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];
  const reviewContractABI = [{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "reviewer",
				"type": "address"
			},
			{
				"indexed": false,
				"internalType": "string",
				"name": "centerName",
				"type": "string"
			},
			{
				"indexed": false,
				"internalType": "uint8",
				"name": "rating",
				"type": "uint8"
			},
			{
				"indexed": false,
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"name": "NewReview",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_centerName",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_message",
				"type": "string"
			},
			{
				"internalType": "uint8",
				"name": "_rating",
				"type": "uint8"
			}
		],
		"name": "addReview",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"name": "centerReviews",
		"outputs": [
			{
				"internalType": "address",
				"name": "reviewer",
				"type": "address"
			},
			{
				"internalType": "string",
				"name": "message",
				"type": "string"
			},
			{
				"internalType": "uint8",
				"name": "rating",
				"type": "uint8"
			},
			{
				"internalType": "uint256",
				"name": "timestamp",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_centerName",
				"type": "string"
			}
		],
		"name": "getReviews",
		"outputs": [
			{
				"components": [
					{
						"internalType": "address",
						"name": "reviewer",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "message",
						"type": "string"
					},
					{
						"internalType": "uint8",
						"name": "rating",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "timestamp",
						"type": "uint256"
					}
				],
				"internalType": "struct ReviewContract.Review[]",
				"name": "",
				"type": "tuple[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}]; // trimmed for brevity

  let signer, bookingContract, reviewContract;

  async function connectWallet() {
    if (window.ethereum) {
      const provider = new ethers.providers.Web3Provider(window.ethereum);
      await provider.send("eth_requestAccounts", []);
      signer = provider.getSigner();
      const address = await signer.getAddress();
      document.getElementById("walletAddress").innerText = "Connected: " + address;
      bookingContract = new ethers.Contract(bookingContractAddress, bookingContractABI, signer);
      reviewContract = new ethers.Contract(reviewContractAddress, reviewContractABI, signer);
    } else {
      alert("Install MetaMask!");
    }
  }

  function saveUserProfile(event) {
    event.preventDefault();
    const profile = {
      name: document.getElementById("profileName").value,
      email: document.getElementById("profileEmail").value,
      sport: document.getElementById("profileSport").value
    };
    localStorage.setItem("userProfile", JSON.stringify(profile));
    bootstrap.Modal.getInstance(document.getElementById("profileModal")).hide();
    alert("✅ Profile saved!");
  }

  async function bookSession(event, form) {
    event.preventDefault();
    if (!signer || !bookingContract) return alert("Connect wallet first.");

    const centerName = form.dataset.centerName;
    const sport = form.dataset.sport;
    const id = form.dataset.centerId;
    const minFee = parseFloat(form.dataset.bookingFee || "0.001");
    const ethValue = parseFloat(document.getElementById(`fee${id}`).value);
    const msg = document.getElementById(`bookingMsg${id}`);

    if (isNaN(ethValue) || ethValue < minFee) {
      msg.innerText = `❌ Minimum payment is ${minFee} ETH.`;
      return;
    }

    try {
      const tx = await bookingContract.bookSession(sport, centerName, {
        value: ethers.utils.parseEther(ethValue.toString())
      });
      msg.innerText = "⏳ Processing...";
      const receipt = await tx.wait();
      msg.innerText = receipt.status === 1 ? "✅ Booking successful!" : "❌ Booking reverted!";
    } catch (err) {
      console.error(err);
      msg.innerText = "❌ Transaction failed or cancelled.";
    }
  }

  async function addReview(event, centerName, id) {
    event.preventDefault();
    if (!signer || !reviewContract) return alert("Connect wallet first.");
    const message = document.getElementById(`reviewMessage${id}`).value;
    const rating = parseInt(document.getElementById(`reviewRating${id}`).value);
    const list = document.getElementById(`reviewList${id}`);
    const status = document.getElementById(`reviewMsg${id}`);

    try {
      const tx = await reviewContract.addReview(centerName, message, rating);
      status.innerText = "Submitting...";
      await tx.wait();
      status.innerText = "✅ Submitted!";
      const li = document.createElement("li");
      li.textContent = `🗣️ ${message} (⭐${rating})`;
      list.appendChild(li);
    } catch (err) {
      console.error(err);
      status.innerText = "❌ Error submitting review.";
    }
  }

  async function loadReviews(centerName, id) {
    if (!signer || !reviewContract) return;
    const list = document.getElementById(`reviewList${id}`);
    list.innerHTML = "";

    try {
      const reviews = await reviewContract.getReviews(centerName);
      reviews.forEach(r => {
        const li = document.createElement("li");
        li.textContent = `🗣️ ${r.message} (⭐${r.rating})`;
        list.appendChild(li);
      });
    } catch (err) {
      console.error(err);
    }
  }

  let bookingIndexMap = [];

async function showMyBookings() {
  if (!signer || !bookingContract) {
    alert("Connect wallet first.");
    return;
  }

  const user = await signer.getAddress();
  const list = document.getElementById("myBookingsList");
  const modal = new bootstrap.Modal(document.getElementById("bookingsModal"));
  list.innerHTML = "";
  bookingIndexMap = [];

  try {
	const bookings = await bookingContract.getBookingsByUser(user);
	const totalBookings = bookings.length;
    console.log("📦 Total bookings found:", totalBookings.toString());

    let activeFound = false;

    for (let i = 0; i < totalBookings; i++) {
      const b = await bookingContract.userBookings(user, i);
      console.log(`🔍 Index ${i} – Amount: ${b.amount}`);

      if (b.amount.toString() === "0") continue;

      activeFound = true;
      bookingIndexMap.push(i); // Save real index

      const amount = ethers.utils.formatEther(b.amount);
      const time = new Date(b.timestamp * 1000).toLocaleString();

      const li = document.createElement("li");
      li.className = "list-group-item d-flex justify-content-between align-items-center";
      li.innerHTML = `
        <div>
          <strong>${b.sport}</strong> – ${b.centerName}<br>
          ${amount} ETH at ${time}
        </div>
        <button class="btn btn-danger btn-sm" onclick="cancelBooking(${bookingIndexMap.length - 1})">Cancel</button>
      `;
      list.appendChild(li);
    }

    if (!activeFound) {
      const li = document.createElement("li");
      li.className = "list-group-item text-muted";
      li.innerText = "No active bookings.";
      list.appendChild(li);
    }

    modal.show();

  } catch (err) {
    console.error("❌ Error fetching bookings:", err);
    alert("Something went wrong while loading bookings.");
  }
}



async function cancelBooking(indexInMap) {
  if (!signer || !bookingContract) {
    alert("Connect wallet first.");
    return;
  }

  try {
    const actualIndex = bookingIndexMap[indexInMap];
    console.log("🛑 Cancelling booking at contract index:", actualIndex);

    const gasEstimate = await bookingContract.estimateGas.cancelBooking(actualIndex);
    const tx = await bookingContract.cancelBooking(actualIndex, {
      gasLimit: gasEstimate
    });

    console.log("⏳ Transaction sent:", tx.hash);
    const receipt = await tx.wait();

    if (receipt.status === 1) {
      alert("✅ Booking cancelled and ETH refunded.");
      showMyBookings(); // Refresh
    } else {
      alert("❌ Cancellation failed (transaction reverted).");
    }
  } catch (err) {
    console.error("❌ Cancel booking error:", err);
    alert("⚠️ Failed to cancel booking. It may already be cancelled or index is invalid.");
  }
}

window.showMyBookings = showMyBookings;

window.showMyBookings = showMyBookings;

window.addEventListener("load", async () => {
  if (window.ethereum) {
    const provider = new ethers.providers.Web3Provider(window.ethereum);
    signer = provider.getSigner();

    try {
      const address = await signer.getAddress();
      document.getElementById("walletAddress").innerText = "Connected: " + address;
      bookingContract = new ethers.Contract(bookingContractAddress, bookingContractABI, signer);
      reviewContract = new ethers.Contract(reviewContractAddress, reviewContractABI, signer);
    } catch (err) {
      console.log("MetaMask not connected yet or user rejected connection.");
    }
  }
});


</script>
</body>
</html>
